{"ts":1350225205350,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var Multiplexer, logger, redis;\n\nredis = require('redis');\nrequire('./raw');\nredis.debug_mode = true;\nlogger = require('winston');\n\nmodule.exports = Multiplexer = function Multiplexer(config) {\n    this.config = config;\n};\n\nMultiplexer.prototype.initConnections = function () {\n    var srv, _i;\n    this.conns = [];\n    this.primeConn = null;\n    logger.info(\"Connecting redis backends ...\");\n\n\n    for (_i in this.config.server) {\n        srv = this.config.server[_i];\n        logger.debug(\"Try to connect to \" + srv.host + \":\" + srv.port);\n\n        if (srv.primary === false) {\n            this.conns.push(redis.createClient(srv.port, srv.host, srv.options));\n            logger.debug(\"Selected \" + srv.host + \":\" + srv.port + \" as secondary\");\n        }\n        else {\n            logger.debug(\"Elected \" + srv.host + \":\" + srv.port + \" as primary\");\n            this.primeConn = redis.createClient(srv.port, srv.host, srv.options);\n        }\n\n\n    }\n};\n\nMultiplexer.prototype.send = function (command, callback) {\n    var _i;\n\n    logger.debug(\"Sending command\");\n    this.primeConn.sendRaw(command, callback);\n\n    logger.debug(\"Sending secondardies\");\n    for (_i in this.conns) {\n        this.conns[_i].sendRaw(command, function (err, res) {\n            logger.debug(\"Got result from secondary, but ignoring it\");\n        });\n    }\n};\n\nMultiplexer.prototype.quit = function () {\n    this.primeConn.quit();\n    for (var i in this.conns) {\n        this.conns[i].quit();\n    }\n};\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1485}]],"length":1485}
{"contributors":[],"silentsave":false,"ts":1350225251508,"patch":[[{"diffs":[[0,"      }\n"],[-1,"\n\n"],[0,"    }\n};"]],"start1":938,"start2":938,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1,"for (_i in this.conns) {\n        this.conns[_i].sendRaw(command,"],[1,"\n    var dummyCB ="],[0," fun"]],"start1":1156,"start2":1156,"length1":72,"length2":26},{"diffs":[[0,"       }"],[1,";\n    \n    for (_i in this.conns) {\n        this.conns[_i].sendRaw(command, dummyCB"],[0,");\n    }"]],"start1":1274,"start2":1274,"length1":16,"length2":99}]],"length":1520,"saved":false}
{"ts":1350225258326,"patch":[[{"diffs":[[0," res) {\n        "],[-1,"    "],[0,"logger.debug(\"Go"]],"start1":1193,"start2":1193,"length1":36,"length2":32},{"diffs":[[0,"oring it\");\n"],[-1,"    "],[0,"    };\n    \n"]],"start1":1257,"start2":1257,"length1":28,"length2":24}]],"length":1512,"saved":false}
{"ts":1350226330101,"patch":[[{"diffs":[[0,"    "],[-1,"this.conns.push("],[1,"var client = "],[0,"redi"]],"start1":588,"start2":588,"length1":24,"length2":21},{"diffs":[[0,"options)"],[1,";\n            if (srv.auth != \"\") {\n                client.auth(srv.auth, function(){});\n            }\n            this.conns.push(client"],[0,");\n     "]],"start1":648,"start2":648,"length1":16,"length2":153}]],"length":1646,"saved":false}
{"ts":1350226343023,"patch":[[{"diffs":[[0,"auth"],[-1,", function(){}"],[0,");\n "]],"start1":724,"start2":724,"length1":22,"length2":8}]],"length":1632,"saved":false}
{"ts":1350226350210,"patch":[[{"diffs":[[0,".auth !="],[1,"="],[0," \"\") {\n "]],"start1":677,"start2":677,"length1":16,"length2":17}]],"length":1633,"saved":false}
{"ts":1350226395205,"patch":[[{"diffs":[[0,", srv.options);\n"],[1,"            if (srv.auth !== \"\") {\n                this.primeConn.auth(srv.auth);\n            }\n"],[0,"        }\n    }\n"]],"start1":1041,"start2":1041,"length1":32,"length2":128}]],"length":1729,"saved":false}
